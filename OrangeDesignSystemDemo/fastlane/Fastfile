#
# Software Name: Orange Design System
# SPDX-FileCopyrightText: Copyright (c) Orange SA
# SPDX-License-Identifier: MIT
#
# This software is distributed under the MIT license,
# the text of which is available at https://opensource.org/license/MIT/
# or see the "LICENSE" file for more details.
#
# Authors: See CONTRIBUTORS.txt
# Software description: A SwiftUI components library with code examples for Orange Design System
#

# App features configuration
# --------------------------

# URL for recirculation module to get feed from backend
APPS_PLUS_SERVICE_URL = ENV["ODS_APPS_PLUS_SERVICE_URL"]

# Apple configuration
# -------------------

# TestFlight
APPLE_ISSUER_ID = ENV["ODS_APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["ODS_APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["ODS_APPLE_KEY_CONTENT"]

# Bundle identifier
DEVELOPER_APP_IDENTIFIER = ENV["ODS_DEVELOPER_BUNDLE_IDENTIFIER"]

# Notifications and hooks
# -----------------------

MATTERMOST_HOOK_URL = ENV["ODS_MATTERMOST_HOOK_URL"]
MATTERMOST_HOOK_BOT_NAME = ENV["ODS_MATTERMOST_HOOK_BOT_NAME"]
MATTERMOST_HOOK_BOT_ICON_URL = ENV["ODS_MATTERMOST_HOOK_BOT_ICON_URL"]

# GitHub
# ------

# Fine grained personal access token with enough permissions for the suitable GitHub project
GITHUB_ACCESS_TOKEN = ENV['GITHUB_ACCESS_TOKEN']

# Should be last commit full hash, for builds and tags
IOS_APP_COMMIT_SHA = ENV['IOS_APP_COMMIT_SHA']

# Project configuration
# ---------------------

ODS_WORKSPACE = "OrangeDesignSystemDemo.xcworkspace"
ODS_PROJECT = "OrangeDesignSystemDemo.xcodeproj"
ODS_SCHEME = "OrangeDesignSystemDemo"

# Lanes
# ------

default_platform(:ios)

platform :ios do

    before_all do |lane, options|
        xcversion(version: "~> 15.1")
    end

    # ------------------------------------------------------------
    # UPDATE BUILD NUMBER WITH TIMESTAMP
    # ------------------------------------------------------------
    desc "UPDATE BUILD NUMBER WITH TIMESTAMP"
    lane :update_build_number do
        puts "👉 Update build number"

        timestamp = sh 'date +%s' # Timestamp are unique and bring details about build date
        timestamp = timestamp.strip!
        puts "New builder number: '#{timestamp}'"

        increment_build_number(xcodeproj: ODS_PROJECT, build_number: timestamp)
    end

    # ------------------------------------------------------------
    # ADD APPS PLUS CREDENTIALS (Recirculation module)
    # ------------------------------------------------------------
    desc "ADD APPS PLUS CREDENTIALS"
    lane :add_credentials_appsplus do
        puts "👉 Add AppsPlus credentials in project"

        if APPS_PLUS_SERVICE_URL.nil? || APPS_PLUS_SERVICE_URL.empty?
            puts "Warning: APPS_PLUS_SERVICE_URL is not defined, are you aware of that?"
            publish_mattermost_notification("⚙️ ⚠️ @channel Warning: APPS_PLUS_SERVICE_URL is not defined, are you aware of that?")
        else
            puts "URL for recirculation module is '#{APPS_PLUS_SERVICE_URL}'" # Ensure your variable is "masked" in your CI/CD chain
        end

        plistPath="#{Dir.pwd}/../OrangeDesignSystemDemo/Resources/Info.plist"
        update_plist(
            plist_path: "#{plistPath}",
            block: proc do |plist|
                plist[:APPS_PLUS_URL] = APPS_PLUS_SERVICE_URL
            end
        )
    end

    # ---------
    # RUN TESTS
    # ---------
    desc "RUN TESTS BY TRIGGERING THE TESTS PLANS OF THE PROJECT"
    lane :test do
        puts "👉 Run tests"

        # Should have on runner one device under at least iOS 15
        # Check the available devices using `xcrun xctrace list devices`
        # Add new environments using `xcodebuild -downloadPlatform iOS`
        begin
            device = "iPhone 14"
            scan(scheme: "OrangeDesignSystemDemo",
                device: device,
                skip_build: true)

            publish_mattermost_notification("🧪 ✅ No issue with tests")

        rescue => error
            publish_mattermost_notification("🧪 🚨 @channel Some issue occured with tests (:test)")
            raise error
        end
    end

    # ------------------------------------------------------------
    # READ AND SET NEXT RELEASE NOTE IN CHANGELOG
    # ------------------------------------------------------------
    desc "READ AND SET NEXT RELEASE NOTE IN CHANGELOG"
    lane :prepare_release do
        puts "👉 Prepare release"

        version = get_app_version

        stamp_changelog(
            changelog_path: '../CHANGELOG.md',
            section_identifier: version,
            git_tag: version,
            should_stamp_date: true,
            stamp_datetime_format: '%F'
        )
    end

    # ------------------------------------------------------------
    # BUILD DEBUG APP
    # ------------------------------------------------------------
    desc "BUILD DEBUG APP"
    lane :buildDebugApp do
        puts "👉 Build debug app"

        cocoapods(
          clean_install: true
        )

        gym(
            scheme: ODS_SCHEME,
            output_directory: 'build/',
            archive_path: 'build/',
            output_name: 'odsApp',
            configuration: 'Debug',
            include_symbols: true,
            export_method: 'development'
        )
    end

    # ------------------------------------------------------------
    # BUILD & UPLOAD TO TESTFLIGHT QUALIF APP
    # ------------------------------------------------------------
    desc "BUILD & UPLOAD TO TESTFLIGHT QUALIF APP"
    lane :qualif do |params|
        puts "👉 Qualif (tagSuffix = #{params[:tagSuffix]}"
        Dir.chdir "../OrangeDesignSystemDemo/Resources/Assets.xcassets" do
            sh "rm -Rf AppIconRelease.appiconset"
            sh "cp -R AppIconQualif.appiconset AppIconRelease.appiconset"
        end

        set_info_plist_value(path: "#{Dir.pwd}/../OrangeDesignSystemDemo/Resources/Info.plist", key: "ODSBuildType", value: "BETA")
        
        build_and_upload(upload: true, tagSuffix: params[:tagSuffix])
    end

    # ------------------------------------------------------------
    # BUILD & UPLOAD TO TESTFLIGHT PROD APP
    # ------------------------------------------------------------
    desc "BUILD & UPLOAD TO TESTFLIGHT (if set in options: upload) PROD APP"
    lane :prod do |params|
        puts "👉 Prod"
        build_and_upload(params)
    end

    # -----------------------------------------------------------------------
    # PRIVATE LANE BUILD & UPLOAD (DEV / QUALIF / PROD is set by main lane)
    # -----------------------------------------------------------------------
    private_lane :build_and_upload do |params|
        puts "👉 Build and upload (tagSuffix = #{params[:tagSuffix]})"

        # Ensure this build-then-uploaded app has a new and unique build number matching also to code version
        update_build_number

        build
        tag_ci_build(params[:tagSuffix])
        
        if params[:upload]
            puts "Upload to TestFlight requested"
            if tag_testflight_upload(params[:tagSuffix])
                upload
            end
        else
            puts "Upload to TestFlight not requested"
        end
    end

    # -----------------------------------------------------------------------
    # PRIVATE LANE BUILD (DEV / QUALIF / PROD is set by main lane)
    # -----------------------------------------------------------------------
    desc "PRIVATE LANE BUILD (DEV / QUALIF / PROD is set by main lane)"
    private_lane :build do
        puts "👉 Build"

        begin
            update_app_identifier(
                xcodeproj: "#{ODS_PROJECT}",
                plist_path: "OrangeDesignSystemDemo/Resources/Info.plist",
                app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
            )

            cocoapods(
                clean_install: true
            )

            # Disable automatic code signing.
            # Thus we won't use any Xcode with plugged account in, and use only needed certificat and provisioning profiles.
            # Mobile provisioning profile named "ods-demo-app-appstore-qualif" must be placed in runner.
            # The certificate(s) used to build (with bundle ID) the provisionning profile must be available in the keychain of the runner
            # (both .cer and p12).
            # This way is more agile and allows to use VM-based solution with on the fly configuration like with Tart
            update_code_signing_settings(path: "#{ODS_PROJECT}",
                use_automatic_signing: false,
                profile_name: 'ods-demo-app-appstore-qualif',
                targets: ODS_SCHEME)
            
            gym(workspace: "#{ODS_WORKSPACE}",
                scheme: ODS_SCHEME,
                configuration: 'Release',
                output_directory: 'build/',
                export_method: 'app-store',
                archive_path: 'build/odsApp.xcarchive',
                xcargs: "-allowProvisioningUpdates")
            
            publish_mattermost_notification("🔨 ✅ @channel A new build has been done successfully")
        rescue => error
            publish_mattermost_notification("🔨 🚨 @channel Some issue occurred during the build step (:build_and_upload)")
            raise error
        end
    end

    # -----------------------------------------------------------------------
    # PRIVATE LANE UPLOAD TO TESTFLIGHT (DEV / QUALIF / PROD is set by main lane)
    # -----------------------------------------------------------------------
    desc "PRIVATE LANE UPLOAD TO TESTFLIGHT"
    private_lane :upload do
        puts "👉 Upload"

        begin
            api_key = app_store_connect_api_key(
                key_id: APPLE_KEY_ID,
                issuer_id: APPLE_ISSUER_ID,
                key_content: APPLE_KEY_CONTENT,
                duration: 500,
                in_house: false
            )
            
            TESTFLIGHT_GROUPS = ENV['TESTFLIGHT_GROUPS'] # Defined in Appfile
            
            version = get_app_version
            puts "App version: '#{version}'"

            build_number = get_build_number(xcodeproj: ODS_PROJECT)
            puts "App build number: '#{build_number}'"

            news = read_current_release_notes

            upload_to_testflight(
                changelog: news,
                app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
                skip_submission: false,
                skip_waiting_for_build_processing: false,
                distribute_external: true,
                notify_external_testers: true,
                groups: TESTFLIGHT_GROUPS,
                api_key: api_key
            )
            
            publish_mattermost_notification("📦 ✅ @channel The upload to TestFlight has been done successfully")    
        rescue => error
            publish_mattermost_notification("📦 🚨 @channel Some issue occurred during the upload step (:build_and_upload)")
            raise error
        end
    end
    
    # -------
    # Helpers
    # -------

    # Add a Git Tag dedicated to TestFLight uploads with sme suffix after a defined pattern
    def tag_ci_build(tagSuffix)
        puts "👉 Tag CI build"

        begin
            if tagSuffix.nil? || tagSuffix.empty?
                puts "No parameter sent for CI tag, nothing will be done"
                publish_mattermost_notification("⚙️ 🤔 No tag suffix has ben given, no tag can be created")
                return false
            else
                expected_git_tag = "ci/" + tagSuffix[0,7]
                if create_tag(expected_git_tag)
                    publish_mattermost_notification("📦 ✅ New Git tag created: #{expected_git_tag}")
                    return true
                else
                    return false
                end
            end
        rescue => error
            publish_mattermost_notification("📦 🚨 @channel Some issue occurred during the tagging step (:tag_build)")
            raise error
        end
    end

    # Add a Git Tag dedicated to TestFLight uploads with sme suffix after a defined pattern
    def tag_testflight_upload(tagSuffix)
        puts "👉 Tag TestFlight upload"

        begin     
            if tagSuffix.nil? || tagSuffix.empty?
                puts "No parameter sent for CI tag, nothing will be done"
                publish_mattermost_notification("⚙️ 🤔 No tag suffix has ben given, no tag can be created")
                return false
            else
                expected_git_tag = "Test_Flight/" + tagSuffix[0,7]
                if create_tag(expected_git_tag)
                    publish_mattermost_notification("📦 ✅ New Git tag created: #{expected_git_tag}")
                    return true
                else
                    return false
                end
            end
        rescue => error
            publish_mattermost_notification("📦 🚨 @channel Some issue occurred during the tagging step (:tag_build)")
            raise error
        end
    end

    # Creates a Git tag at given commit through HTTP protocol to prevent proxy or firewalls to block SSH requests
    def create_tag(tag)
      
        # Check personal access token for tag creation
        if GITHUB_ACCESS_TOKEN.nil? || GITHUB_ACCESS_TOKEN.empty?
            puts "Error: No GitHub access token defined, cannot create and push tags"
            publish_mattermost_notification("⚙️ 😰 @channel No GitHub access token defined, cannot create and push tags")
            return false
        else
            # Check if given tag exists yet
            puts "Check if '#{tag}' exists yet"
            result=sh("curl -s 'https://api.github.com/repos/Orange-OpenSource/ods-ios/git/refs/tags/#{tag}' | jq -r '.ref'") # TODO Shell error management
            # If tag exists, CURL response is formatted like "refs/tags/tag"
            if "refs/tags/#{tag}".eql? result.strip # Removes line break avaialble in command result
                puts "The tag '#{tag}' still exists, won't create new tag"
                publish_mattermost_notification("⚙️ 🤔 The tag '#{tag}' still exists, won't create new tag")
                return false
            else
                puts "Commit SHA to tag is '#{IOS_APP_COMMIT_SHA}'"
                # Just a light tag is enough 
                sh("curl -L \
                  -X POST \
                  -H 'Accept: application/vnd.github+json' \
                  -H 'Authorization: Bearer #{GITHUB_ACCESS_TOKEN}'\
                  -H 'X-GitHub-Api-Version: 2022-11-28' \
                  https://api.github.com/repos/Orange-OpenSource/ods-ios/git/refs \
                  -d '{\"ref\":\"refs/tags/#{tag}\",\"sha\":\"#{IOS_APP_COMMIT_SHA}\"}'") # TODO Shell error management
                  return true
              end
        end
    end

    # Sends a message notification through Mattermost hook
    def publish_mattermost_notification(message)
        mattermost(url: MATTERMOST_HOOK_URL,
                  text: "#{message}",
                  username: MATTERMOST_HOOK_BOT_NAME,
                  icon_url: MATTERMOST_HOOK_BOT_ICON_URL
                  )
    end

    # Get version set in the Xcode project
    def get_app_version
        version = get_version_number(
            xcodeproj: ODS_PROJECT,
            target: ODS_SCHEME
        )
        return version
    end

    # Read release note in section associated to the current version
    # If empty, try within the Unreleased section
    def read_current_release_notes
        version = get_app_version

        changelog=read_changelog(
            changelog_path: '../CHANGELOG.md',
            section_identifier: "[#{version}]",
        )

        if changelog == ""
            changelog=read_changelog(
                changelog_path: '../CHANGELOG.md',
                section_identifier: "[Unreleased]",
            )
        end

        puts "Current relase notes = #{changelog}"
        return changelog
    end
end