APPLE_ISSUER_ID = ENV["ODS_APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["ODS_APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["ODS_APPLE_KEY_CONTENT"]
DEVELOPER_APP_IDENTIFIER = ENV["ODS_DEVELOPER_APP_IDENTIFIER"]

ODS_WORKSPACE = "OrangeDesignSystemDemo.xcworkspace"
ODS_PROJECT = "OrangeDesignSystemDemo.xcodeproj"
ODS_SCHEME = "OrangeDesignSystemDemo"
TESTFLIGHT_GROUPS = ENV["TESTFLIGHT_GROUPS"]

default_platform(:ios)

platform :ios do

  desc "update bundler number"
  lane :increment do
    timestamp = sh 'date +%s'
    timestamp = timestamp.strip!
    increment_build_number(xcodeproj: ODS_PROJECT, build_number: timestamp)
  end

  desc "Prepare release notes"
  lane :prepare_release do
    version = get_app_version

    stamp_changelog(
        changelog_path: '../CHANGELOG.md',
        section_identifier: version,
        git_tag: version,
        should_stamp_date: true,
        stamp_datetime_format: '%F'
    )
  end

  desc "build IPA file"
  lane :build do
    cocoapods(
      clean_install: true
    )
    gym(
      scheme: ODS_SCHEME,
      output_directory: 'build/',
      archive_path: 'build/',
      output_name: 'odsDemo',
      configuration: 'Debug',
      include_symbols: true,
      export_method: 'development'
    )
  end

  lane :qualif do
    build_and_upload

  end

  lane :prod do
    build_and_upload

  end

  desc "upload to testflight"
  private lane :build_and_upload do
    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 500,
      in_house: false
    )

    increment

    cocoapods(
        clean_install: true
    )

    build_app(
        scheme: ODS_SCHEME,
        output_directory: 'build/',
        archive_path: 'build/',
        output_name: 'odsDemo',
        configuration: 'Release',
        include_symbols: true,
        export_method: 'app-store',
        xcargs: '-allowProvisioningUpdates'
    )

    version = get_app_version
    puts version

    build_number = get_build_number(xcodeproj: ODS_PROJECT)
    puts build_number

    news = read_current_release_notes

    upload_to_testflight(
        changelog: news,
        app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
        skip_submission: false,
        skip_waiting_for_build_processing: false,
        distribute_external: true,
        notify_external_testers: true,
        groups: TESTFLIGHT_GROUPS,
        api_key: api_key
    )
  end

  def get_app_version
    version = get_version_number(
        xcodeproj: ODS_PROJECT,
        target: ODS_SCHEME
    )
    return version
  end


  def read_current_release_notes
    version = get_app_version

    changelog=read_changelog(
        changelog_path: '../CHANGELOG.md',
        section_identifier: "[#{version}]",
    )

    if changelog == ""
        changelog=read_changelog(
            changelog_path: '../CHANGELOG.md',
            section_identifier: "[Unreleased]",
        )
    end

    puts "current relase notes = #{changelog}"
    return changelog
  end

end

